// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fengye87/dddsample-core/cargo/domain (interfaces: CargoRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/fengye87/dddsample-core/cargo/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCargoRepository is a mock of CargoRepository interface.
type MockCargoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCargoRepositoryMockRecorder
}

// MockCargoRepositoryMockRecorder is the mock recorder for MockCargoRepository.
type MockCargoRepositoryMockRecorder struct {
	mock *MockCargoRepository
}

// NewMockCargoRepository creates a new mock instance.
func NewMockCargoRepository(ctrl *gomock.Controller) *MockCargoRepository {
	mock := &MockCargoRepository{ctrl: ctrl}
	mock.recorder = &MockCargoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCargoRepository) EXPECT() *MockCargoRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockCargoRepository) Find(arg0 domain.TrackingID) (*domain.Cargo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*domain.Cargo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCargoRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCargoRepository)(nil).Find), arg0)
}

// FindAll mocks base method.
func (m *MockCargoRepository) FindAll() ([]domain.Cargo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Cargo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCargoRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCargoRepository)(nil).FindAll))
}

// NextTrackingID mocks base method.
func (m *MockCargoRepository) NextTrackingID() (domain.TrackingID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextTrackingID")
	ret0, _ := ret[0].(domain.TrackingID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextTrackingID indicates an expected call of NextTrackingID.
func (mr *MockCargoRepositoryMockRecorder) NextTrackingID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTrackingID", reflect.TypeOf((*MockCargoRepository)(nil).NextTrackingID))
}

// Store mocks base method.
func (m *MockCargoRepository) Store(arg0 *domain.Cargo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCargoRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCargoRepository)(nil).Store), arg0)
}
