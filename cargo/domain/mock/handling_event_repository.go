// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fengye87/dddsample-core/cargo/domain (interfaces: HandlingEventRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/fengye87/dddsample-core/cargo/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlingEventRepository is a mock of HandlingEventRepository interface.
type MockHandlingEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHandlingEventRepositoryMockRecorder
}

// MockHandlingEventRepositoryMockRecorder is the mock recorder for MockHandlingEventRepository.
type MockHandlingEventRepositoryMockRecorder struct {
	mock *MockHandlingEventRepository
}

// NewMockHandlingEventRepository creates a new mock instance.
func NewMockHandlingEventRepository(ctrl *gomock.Controller) *MockHandlingEventRepository {
	mock := &MockHandlingEventRepository{ctrl: ctrl}
	mock.recorder = &MockHandlingEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlingEventRepository) EXPECT() *MockHandlingEventRepositoryMockRecorder {
	return m.recorder
}

// LookupHandlingHistoryOfCargo mocks base method.
func (m *MockHandlingEventRepository) LookupHandlingHistoryOfCargo(arg0 domain.TrackingID) (*domain.HandlingHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupHandlingHistoryOfCargo", arg0)
	ret0, _ := ret[0].(*domain.HandlingHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHandlingHistoryOfCargo indicates an expected call of LookupHandlingHistoryOfCargo.
func (mr *MockHandlingEventRepositoryMockRecorder) LookupHandlingHistoryOfCargo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHandlingHistoryOfCargo", reflect.TypeOf((*MockHandlingEventRepository)(nil).LookupHandlingHistoryOfCargo), arg0)
}

// Store mocks base method.
func (m *MockHandlingEventRepository) Store(arg0 *domain.HandlingEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockHandlingEventRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockHandlingEventRepository)(nil).Store), arg0)
}
