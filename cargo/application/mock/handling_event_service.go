// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fengye87/dddsample-core/cargo/application (interfaces: HandlingEventService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	domain "github.com/fengye87/dddsample-core/cargo/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlingEventService is a mock of HandlingEventService interface.
type MockHandlingEventService struct {
	ctrl     *gomock.Controller
	recorder *MockHandlingEventServiceMockRecorder
}

// MockHandlingEventServiceMockRecorder is the mock recorder for MockHandlingEventService.
type MockHandlingEventServiceMockRecorder struct {
	mock *MockHandlingEventService
}

// NewMockHandlingEventService creates a new mock instance.
func NewMockHandlingEventService(ctrl *gomock.Controller) *MockHandlingEventService {
	mock := &MockHandlingEventService{ctrl: ctrl}
	mock.recorder = &MockHandlingEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlingEventService) EXPECT() *MockHandlingEventServiceMockRecorder {
	return m.recorder
}

// RegisterHandlingEvent mocks base method.
func (m *MockHandlingEventService) RegisterHandlingEvent(arg0 time.Time, arg1 domain.TrackingID, arg2 domain.VoyageNumber, arg3 domain.UNLocode, arg4 domain.HandlingEventType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHandlingEvent", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHandlingEvent indicates an expected call of RegisterHandlingEvent.
func (mr *MockHandlingEventServiceMockRecorder) RegisterHandlingEvent(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandlingEvent", reflect.TypeOf((*MockHandlingEventService)(nil).RegisterHandlingEvent), arg0, arg1, arg2, arg3, arg4)
}
