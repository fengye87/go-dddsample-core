// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fengye87/dddsample-core/cargo/application (interfaces: EventListener)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	application "github.com/fengye87/dddsample-core/cargo/application"
	domain "github.com/fengye87/dddsample-core/cargo/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockEventListener is a mock of EventListener interface.
type MockEventListener struct {
	ctrl     *gomock.Controller
	recorder *MockEventListenerMockRecorder
}

// MockEventListenerMockRecorder is the mock recorder for MockEventListener.
type MockEventListenerMockRecorder struct {
	mock *MockEventListener
}

// NewMockEventListener creates a new mock instance.
func NewMockEventListener(ctrl *gomock.Controller) *MockEventListener {
	mock := &MockEventListener{ctrl: ctrl}
	mock.recorder = &MockEventListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventListener) EXPECT() *MockEventListenerMockRecorder {
	return m.recorder
}

// CargoHasArrived mocks base method.
func (m *MockEventListener) CargoHasArrived(arg0 *domain.Cargo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CargoHasArrived", arg0)
}

// CargoHasArrived indicates an expected call of CargoHasArrived.
func (mr *MockEventListenerMockRecorder) CargoHasArrived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CargoHasArrived", reflect.TypeOf((*MockEventListener)(nil).CargoHasArrived), arg0)
}

// CargoWasHandled mocks base method.
func (m *MockEventListener) CargoWasHandled(arg0 *domain.HandlingEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CargoWasHandled", arg0)
}

// CargoWasHandled indicates an expected call of CargoWasHandled.
func (mr *MockEventListenerMockRecorder) CargoWasHandled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CargoWasHandled", reflect.TypeOf((*MockEventListener)(nil).CargoWasHandled), arg0)
}

// CargoWasMisdirected mocks base method.
func (m *MockEventListener) CargoWasMisdirected(arg0 *domain.Cargo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CargoWasMisdirected", arg0)
}

// CargoWasMisdirected indicates an expected call of CargoWasMisdirected.
func (mr *MockEventListenerMockRecorder) CargoWasMisdirected(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CargoWasMisdirected", reflect.TypeOf((*MockEventListener)(nil).CargoWasMisdirected), arg0)
}

// ReceivedHandlingEventRegistrationAttempt mocks base method.
func (m *MockEventListener) ReceivedHandlingEventRegistrationAttempt(arg0 *application.HandlingEventRegistrationAttempt) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedHandlingEventRegistrationAttempt", arg0)
}

// ReceivedHandlingEventRegistrationAttempt indicates an expected call of ReceivedHandlingEventRegistrationAttempt.
func (mr *MockEventListenerMockRecorder) ReceivedHandlingEventRegistrationAttempt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedHandlingEventRegistrationAttempt", reflect.TypeOf((*MockEventListener)(nil).ReceivedHandlingEventRegistrationAttempt), arg0)
}
