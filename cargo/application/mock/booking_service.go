// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fengye87/dddsample-core/cargo/application (interfaces: BookingService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	domain "github.com/fengye87/dddsample-core/cargo/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBookingService is a mock of BookingService interface.
type MockBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceMockRecorder
}

// MockBookingServiceMockRecorder is the mock recorder for MockBookingService.
type MockBookingServiceMockRecorder struct {
	mock *MockBookingService
}

// NewMockBookingService creates a new mock instance.
func NewMockBookingService(ctrl *gomock.Controller) *MockBookingService {
	mock := &MockBookingService{ctrl: ctrl}
	mock.recorder = &MockBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingService) EXPECT() *MockBookingServiceMockRecorder {
	return m.recorder
}

// AssignCargoToRoute mocks base method.
func (m *MockBookingService) AssignCargoToRoute(arg0 *domain.Itinerary, arg1 domain.TrackingID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCargoToRoute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignCargoToRoute indicates an expected call of AssignCargoToRoute.
func (mr *MockBookingServiceMockRecorder) AssignCargoToRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCargoToRoute", reflect.TypeOf((*MockBookingService)(nil).AssignCargoToRoute), arg0, arg1)
}

// BookNewCargo mocks base method.
func (m *MockBookingService) BookNewCargo(arg0, arg1 domain.UNLocode, arg2 time.Time) (domain.TrackingID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookNewCargo", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.TrackingID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookNewCargo indicates an expected call of BookNewCargo.
func (mr *MockBookingServiceMockRecorder) BookNewCargo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookNewCargo", reflect.TypeOf((*MockBookingService)(nil).BookNewCargo), arg0, arg1, arg2)
}

// ChangeDestination mocks base method.
func (m *MockBookingService) ChangeDestination(arg0 domain.TrackingID, arg1 domain.UNLocode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDestination", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeDestination indicates an expected call of ChangeDestination.
func (mr *MockBookingServiceMockRecorder) ChangeDestination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDestination", reflect.TypeOf((*MockBookingService)(nil).ChangeDestination), arg0, arg1)
}

// RequestPossibleRoutesForCargo mocks base method.
func (m *MockBookingService) RequestPossibleRoutesForCargo(arg0 domain.TrackingID) ([]domain.Itinerary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPossibleRoutesForCargo", arg0)
	ret0, _ := ret[0].([]domain.Itinerary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPossibleRoutesForCargo indicates an expected call of RequestPossibleRoutesForCargo.
func (mr *MockBookingServiceMockRecorder) RequestPossibleRoutesForCargo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPossibleRoutesForCargo", reflect.TypeOf((*MockBookingService)(nil).RequestPossibleRoutesForCargo), arg0)
}
